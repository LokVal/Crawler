CREATE DATABASE AMAZON_PARSER;

\CONNECT amazon_parser;

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE MANUFACTURER
(
    ID UUID PRIMARY KEY DEFAULT UUID_GENERATE_V4(),
    NAME VARCHAR(256) NOT NULL UNIQUE,

    CREATE_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
    MOD_DATE TIMESTAMP
);

CREATE TABLE PRODUCT_BRAND
(
    ID UUID PRIMARY KEY DEFAULT UUID_GENERATE_V4(),
    NAME VARCHAR(256) NOT NULL UNIQUE,
    MANUFACTURER_ID UUID REFERENCES MANUFACTURER(ID),

    CREATE_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
    MOD_DATE TIMESTAMP
);

CREATE TABLE PRODUCT
(
    ID UUID PRIMARY KEY DEFAULT UUID_GENERATE_V4(),
    ASIN VARCHAR(20) UNIQUE NOT NULL,
    MODEL_NUMBER VARCHAR(100) NOT NULL,
    URL VARCHAR(256) UNIQUE NOT NULL,
    PRODUCT_TITLE VARCHAR(256) NOT NULL,
    PRICE DECIMAL,
    BSR DECIMAL,
    CUSTOMER_RATING SMALLINT,
    RATING_AMOUNT INT,
    PRODUCT_BRAND_ID UUID REFERENCES PRODUCT_BRAND(ID),
    PUBLISHED DATE,
    DIM_X DECIMAL,
    DIM_Y DECIMAL,
    DIM_Z DECIMAL,
    WEIGHT DECIMAL,
    SHIPPING_WEIGHT DECIMAL,
    CREATE_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
    MOD_DATE TIMESTAMP
);

CREATE TABLE PRODUCT_UPDATE_AUDIT
(
    ID UUID PRIMARY KEY DEFAULT UUID_GENERATE_V4(),
    TYPE VARCHAR(10),
    PROPERTY_NAME VARCHAR(100) NOT NULL,

    OLD_VALUE VARCHAR(1000),
    NEW_VALUE VARCHAR(1000),

    CREATE_DATE TIMESTAMP NOT NULL DEFAULT NOW(),
    MOD_DATE TIMESTAMP
);

CREATE OR REPLACE FUNCTION PR_TR_PRODUCT_UPDATE()
RETURNS TRIGGER AS
$$
BEGIN
    IF OLD.ASIN <> NEW.ASIN THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'ASIN', OLD.ASIN::VARCHAR(1000), NEW.ASIN::VARCHAR(1000));
    END IF;
    IF OLD.MODEL_NUMBER <> NEW.MODEL_NUMBER THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'MODEL_NUMBER', OLD.MODEL_NUMBER::VARCHAR(1000), NEW.MODEL_NUMBER::VARCHAR(1000));
    END IF;
    IF OLD.URL <> NEW.URL THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'URL', OLD.URL::VARCHAR(1000), NEW.URL::VARCHAR(1000));
    END IF;
    IF OLD.PRODUCT_TITLE <> NEW.PRODUCT_TITLE THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'PRODUCT_TITLE', OLD.PRODUCT_TITLE::VARCHAR(1000), NEW.PRODUCT_TITLE::VARCHAR(1000));
    END IF;
    IF OLD.PRICE <> NEW.PRICE THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'PRICE', OLD.PRICE::VARCHAR(1000), NEW.PRICE::VARCHAR(1000));
    END IF;
        IF OLD.BSR <> NEW.BSR THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'BSR', OLD.BSR::VARCHAR(1000), NEW.BSR::VARCHAR(1000));
    END IF;
    IF OLD.CUSTOMER_RATING <> NEW.CUSTOMER_RATING THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'CUSTOMER_RATING', OLD.CUSTOMER_RATING::VARCHAR(1000), NEW.CUSTOMER_RATING::VARCHAR(1000));
    END IF;
    IF OLD.RATING_AMOUNT <> NEW.RATING_AMOUNT THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'RATING_AMOUNT', OLD.RATING_AMOUNT::VARCHAR(1000), NEW.RATING_AMOUNT::VARCHAR(1000));
    END IF;
    IF OLD.PRODUCT_BRAND_ID <> NEW.PRODUCT_BRAND_ID THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'PRODUCT_BRAND_ID', OLD.PRODUCT_BRAND_ID::VARCHAR(1000), NEW.PRODUCT_BRAND_ID::VARCHAR(1000));
    END IF;
    IF OLD.PUBLISHED <> NEW.PUBLISHED THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'PUBLISHED', OLD.PUBLISHED::VARCHAR(1000), NEW.PUBLISHED::VARCHAR(1000));
    END IF;
    IF OLD.DIM_X <> NEW.DIM_X THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'DIM_X', OLD.DIM_X::VARCHAR(1000), NEW.DIM_X::VARCHAR(1000));
    END IF;
    IF OLD.DIM_Y <> NEW.DIM_Y THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'DIM_Y', OLD.DIM_Y::VARCHAR(1000), NEW.DIM_Y::VARCHAR(1000));
    END IF;
    IF OLD.DIM_Z <> NEW.DIM_Z THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'DIM_Z', OLD.DIM_Z::VARCHAR(1000), NEW.DIM_Z::VARCHAR(1000));
    END IF;
    IF OLD.WEIGHT <> NEW.WEIGHT THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'WEIGHT', OLD.WEIGHT::VARCHAR(1000), NEW.WEIGHT::VARCHAR(1000));
    END IF;
    IF OLD.SHIPPING_WEIGHT <> NEW.SHIPPING_WEIGHT THEN
        INSERT INTO PRODUCT_UPDATE_AUDIT(TYPE, PROPERTY_NAME, OLD_VALUE, NEW_VALUE)
        VALUES('UPDATE', 'SHIPPING_WEIGHT', OLD.SHIPPING_WEIGHT::VARCHAR(1000), NEW.SHIPPING_WEIGHT::VARCHAR(1000));
    END IF;

   RETURN NEW;
END;
$$
LANGUAGE plpgsql VOLATILE;

CREATE TRIGGER TR_PRODUCT_UPDATE
    BEFORE UPDATE ON PRODUCT
    FOR EACH ROW EXECUTE PROCEDURE PR_TR_PRODUCT_UPDATE();
